@page "/financial_accounting"
@using System.Text.Json;
@using Financial_Accounting_Blazor.Controllers
@using Financial_Accounting_Blazor.Models
@using Financial_Accounting_Blazor.UnitOfWork

@inject IUnitOfWork unitOfWork
@inject Transaction Transactions
@inject MoneyTransactionController TransactionController

<h2>Financial Accounting</h2>

<nav class="one">
    <ul class="topmenu">
        <li>
            <button class="btn btn-info">Transactions<i class="fa fa-angle-down"></i></button>
            <ul class="submenu">
                <li><button class="btn btn-info btn-block" id="btnAll" @onclick="(() => Refresh())">All</button></li>
                <li><button class="btn btn-info btn-block" id="btnIncom" @onclick="(() => AllIncome())">Income</button></li>
                <li><button class="btn btn-info btn-block" id="btnConsumption" @onclick="(() => AllConsumption())">Consumption</button></li>
            </ul>
        </li>
        <li>
            <button class="btn btn-info btn-block">Reporting per Date<i class="fa fa-angle-down"></i></button>
            <ul class="submenu">
                <li>
                    <table  class=' bg-info table-striped table-bordered table-hover table-condensed' style="width:80%;">
                        <thead>
                            <tr>
                                <th style="width: 40%">Operations per Date</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    <input @bind-value="@OperationDate" />
                                </td>
                                <td>
                                    <button class="btn btn-info btn-block"  @onclick="(() => OperationsPerDate(OperationDate))">Show</button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </li>
                <li>
                    <table class='bg-info table-striped table-bordered table-hover table-condensed' style="width:80%;">
                        <thead>
                            <tr>
                                <th style="width: 40%">Income per Date</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    <input @bind-value="@OperationDate"/>
                                </td>
                                <td>
                                    <button class="btn btn-info btn-block" @onclick="(() => IncomePerDate(OperationDate))">Show</button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </li>
                <li>
                    <table class='bg-info table-striped table-bordered table-hover table-condensed' style="width:80%;">
                        <thead>
                            <tr>
                                <th style="width: 40%">Consumption per Date</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    <input @bind-value="@OperationDate"/>
                                </td>
                                <td>
                                    <button class="btn btn-info btn-block" @onclick="(() => ConsumptionPerDate(OperationDate))">Show</button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </li>
            </ul>
        </li>
        <li>
            <button class="btn btn-info btn-block">Reporting for the Periode<i class="fa fa-angle-down"></i></button>
            <ul class="submenu">
                <li>
                    <table class='bg-info table-striped table-bordered table-hover table-condensed' style="width:80%;">
                        <thead>
                            <tr>
                                <th style="width: 40%">Operations for the Periode<i class="fa fa-angle-down"></i></th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    <input placeholder ="Start Date" @bind-value="@StartDate"/>
                                    <input placeholder ="End Date" @bind-value="@EndDate"/>
                                </td>
                                <td>
                                    <button class="btn btn-info btn-block" @onclick="(() => OperationsForThePeriod(StartDate, EndDate))">Show</button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </li>
                <li>
                    <table class=' bg-info table-striped table-bordered table-hover table-condensed' style="width:80%;">
                        <thead>
                            <tr>
                                <th style="width: 40%">Income for the Periode<i class="fa fa-angle-down"></i></th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    <input  @bind-value="@StartDate" />
                                    <input @bind-value="@EndDate" />
                                </td>
                                <td>
                                    <button class="btn btn-info btn-block"  @onclick="(() => IncomeForThePeriod(StartDate, EndDate))">Show</button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </li>
                <li>
                    <table class=' bg-info table-striped table-bordered table-hover table-condensed' style="width:80%;">
                        <thead>
                            <tr>
                                <th style="width: 40%">Consumption for the Periode<i class="fa fa-angle-down"></i></th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    <input @bind-value="@StartDate" />
                                    <input @bind-value="@EndDate" />
                                </td>
                                <td>
                                    <button class="btn btn-info btn-block"  @onclick="(() => ConsumptionForThePeriod(StartDate, EndDate))">Show</button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </li>
            </ul>
        </li>
    </ul>
    <br />
    <div class="row">
        <div class="col-sm-1">
            <p>Sum:</p>
            <p>Date:</p>
        </div>
        <div class="col-sm-4">
            <input id="TransactionSum" @bind-value="@Sum">
            <input id="TransactionDate"  @bind-value="@dateTime">
        </div>
        <div class="col-sm-1">
            <button class="btn btn-success" id="btnAdd" @onclick="(() => AddTransaction())">Add</button>
        </div>
        <div class="col-sm-2">
            @if (transactions != null && transactions.Count > 0)
            {
                <button class="btn btn-danger" @onclick="(() => DeleteAllTransactions())">Delete All</button>
            }
        </div>
    </div>
    @if (transactions == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @if (transactions.Count > 0)
        {
            <table class='table table-striped table-bordered table-hover table-condensed' style="width:80%;">
                <thead>
                    <tr>
                        <th style="width: 40%">Sum</th>
                        <th style="width: 40%">Time</th>
                        <th style="width: 40%">Edit</th>
                        <th style="width: 20%">Delete</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in transactions)
                    {
                    <tr>
                        <td>
                            <span style="display:@HideOnEditing(transaction.Id);">@transaction.sum</span>
                            <input style="display:@ShowOnEditing(transaction.Id);" placeholder ="@transaction.sum" @bind-value="@SumToUpdate" />
                        </td>
                        <td>
                            <span style="display:@HideOnEditing(transaction.Id);">@transaction.DateTime</span>
                            <input style="display:@ShowOnEditing(transaction.Id);" placeholder ="@transaction.DateTime" @bind-value="@DateToUpdate" />
                        </td>
                        <td>
                            <button style="display:@HideOnEditing(transaction.Id);" class="btn btn-primary" @onclick="(() => EditTransaction(transaction))">Edit</button>
                            <button style="display:@ShowOnEditing(transaction.Id);" class="btn btn-success" @onclick="(() => UpdateTransaction(transaction))">Update</button>
                            <button style="display:@ShowOnEditing(transaction.Id);" class="btn btn-primary" @onclick="CancelTransaction">Cancel</button>
                        </td>
                        <td><button class="btn btn-danger" @onclick="(async () => await DeleteTransaction(transaction.Id))">Delete</button></td>
                    </tr>
                    }
                </tbody>
            </table>}
        }

</nav>

@code
{
    int Sum, SumToUpdate;
    DateTime DateToUpdate = DateTime.Now;
    DateTime dateTime = DateTime.Now;
    DateTime OperationDate = DateTime.Now;
    DateTime StartDate = DateTime.Now;
    DateTime EndDate = DateTime.Now;
    int SelectedID = -1;
    private List<Transaction> transactions = new List<Transaction>();
    int id;

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }
    private async Task Refresh()
    {
        UseCaseResult all = JsonSerializer.Deserialize<UseCaseResult>(new GetOperationsUseCase(this.unitOfWork).Execute());
        transactions = all.result;
        StateHasChanged();
    }
    private async Task AddTransaction()
    {
        Transaction newTransaction = new Transaction();
        newTransaction.sum = Sum;
        newTransaction.DateTime = dateTime;
        new PostUseCase(this.unitOfWork).Execute(newTransaction);
        await Refresh();
    }
    private async Task DeleteTransaction(int id)
    {
        new DeleteUseCase(this.unitOfWork).Execute(id);
        await Refresh();
    }
    private async Task DeleteAllTransactions()
    {
        new DeleteUseCase(this.unitOfWork).Execute();
        await Refresh();
    }
    private async Task UpdateTransaction(Transaction transaction)
    {
        transaction.sum = SumToUpdate;
        transaction.DateTime = DateToUpdate;
        new PutUseCase(this.unitOfWork).Execute(transaction);
        await Refresh();
        SelectedID = -1;
    }
    private void EditTransaction(Transaction transaction)
    {
        SelectedID = transaction.Id;
    }
    private void AllIncome()
    {
        UseCaseResult allIncome = JsonSerializer.Deserialize<UseCaseResult>(new IncomeUseCase(this.unitOfWork).Execute());
        transactions = allIncome.result;
        StateHasChanged();
    }
    private void AllConsumption()
    {
        UseCaseResult allConsumption = JsonSerializer.Deserialize<UseCaseResult>(new ConsumptionUseCase(this.unitOfWork).Execute());
        transactions = allConsumption.result;
        StateHasChanged();
    }
    private void OperationsPerDate(DateTime dateTime)
    {
        UseCaseResult allIncome = JsonSerializer.Deserialize<UseCaseResult>(new GetOperationsUseCase(this.unitOfWork).Execute(dateTime));
        transactions = allIncome.result;
        StateHasChanged();
    }
    private void IncomePerDate(DateTime dateTime)
    {
        UseCaseResult allIncome = JsonSerializer.Deserialize<UseCaseResult>(new IncomeUseCase(this.unitOfWork).Execute(dateTime));
        transactions = allIncome.result;
        StateHasChanged();
    }
    private void ConsumptionPerDate(DateTime dateTime)
    {
        UseCaseResult allIncome = JsonSerializer.Deserialize<UseCaseResult>(new ConsumptionUseCase(this.unitOfWork).Execute(dateTime));
        transactions = allIncome.result;
        StateHasChanged();
    }
    private void OperationsForThePeriod(DateTime start, DateTime end)
    {
        UseCaseResult allIncome = JsonSerializer.Deserialize<UseCaseResult>(new GetOperationsUseCase(this.unitOfWork).Execute(start, end));
        transactions = allIncome.result;
        StateHasChanged();
    }
    private void IncomeForThePeriod(DateTime start, DateTime end)
    {
        UseCaseResult allIncome = JsonSerializer.Deserialize<UseCaseResult>(new IncomeUseCase(this.unitOfWork).Execute(start, end));
        transactions = allIncome.result;
        StateHasChanged();
    }
    private void ConsumptionForThePeriod(DateTime start, DateTime end)
    {
        UseCaseResult allIncome = JsonSerializer.Deserialize<UseCaseResult>(new ConsumptionUseCase(this.unitOfWork).Execute(start, end));
        transactions = allIncome.result;
        StateHasChanged();
    }


    String ShowOnEditing(int _id)
    {
        return (SelectedID == _id) ? "" : "none";
    }

    String HideOnEditing(int _id)
    {
        return (SelectedID == _id) ? "none" : "";
    }

    private void CancelTransaction()
    {
        SelectedID = -1;
    }
}
